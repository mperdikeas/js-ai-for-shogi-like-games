{"version":3,"sources":["../src/captureBag.js"],"names":["CaptureBag","arguments","length","capturedPieces","isArray","forEach","x","p","push","switchSidesAndDemote","sideA","uniq","filter","isSideA","map","piece","some","equals","has","toString","pieceWasFound","i","splice","slice","switchSides","sortBy","join","exports"],"mappings":"AACA;;;;AAEA;;;;AACA;;;;AAEA;;;;;;IAEMA,U;AAEF,0BAAc;AAAA;;AACV,YAAIC,UAAUC,MAAV,KAAmB,CAAvB,EACI,KAAKC,cAAL,GAAsB,EAAtB,CADJ,KAEK;AACD,kCAAOF,UAAUC,MAAV,KAAqB,CAA5B;AACA,kCAAO,iBAAEE,OAAF,CAAUH,UAAU,CAAV,CAAV,CAAP;AACAA,sBAAU,CAAV,EAAaI,OAAb,CAAqB,aAAG;AACpB,sCAAOC,+BAAP;AACH,aAFD;AAGA,iBAAKH,cAAL,GAAsBF,UAAU,CAAV,CAAtB;AACH;AACJ;;;;gCACOM,C,EAA+B;AACnC,iBAAKJ,cAAL,CAAoBK,IAApB,CAAyBD,EAAEE,oBAAF,EAAzB;AACH;;;oCACWC,K,EAAuC;AAC/C,mBAAO,iBAAEC,IAAF,CAAQ,KAAKR,cAAL,CAAoBS,MAApB,CAA2B;AAAA,uBAAKF,UAAQJ,EAAEO,OAAf;AAAA,aAA3B,EAAmDC,GAAnD,CAAyD;AAAA,uBAAIR,EAAES,KAAN;AAAA,aAAzD,CAAR,CAAP;AACH;;;4BACGR,C,EAAkC;AAClC,mBAAO,iBAAES,IAAF,CAAO,KAAKb,cAAZ,EAA4B,UAACG,CAAD;AAAA,uBAAKA,EAAEW,MAAF,CAASV,CAAT,CAAL;AAAA,aAA5B,CAAP;AACH;;;qDAC4BA,C,EAA+B;AACxD,kCAAO,KAAKW,GAAL,CAASX,CAAT,CAAP,aAA6BA,EAAEY,QAAF,EAA7B,+CAAmF,KAAKA,QAAL,EAAnF;AACA,gBAAIC,gBAAgB,KAApB;AACA,iBAAK,IAAIC,IAAI,KAAKlB,cAAL,CAAoBD,MAApB,GAA2B,CAAxC,EAA4CmB,KAAK,CAAjD,EAAoDA,GAApD,EAAyD;AACrD,oBAAI,KAAKlB,cAAL,CAAoBkB,CAApB,EAAuBJ,MAAvB,CAA8BV,CAA9B,CAAJ,EAAsC;AAClC,yBAAKJ,cAAL,CAAoBmB,MAApB,CAA2BD,CAA3B,EAA8B,CAA9B;AACAD,oCAAgB,IAAhB;AACA;AACH;AACJ;AACD,kCAAOA,aAAP,EAAsB,mBAAtB;AACH;;;gCACmB;AAChB,mBAAO,IAAIpB,UAAJ,CAAe,KAAKG,cAAL,CAAoBoB,KAApB,EAAf,CAAP;AACH;;;qCACwB;AACrB,mBAAO,IAAIvB,UAAJ,CAAe,KAAKG,cAAL,CAAoBW,GAApB,CAAyB,UAACR,CAAD;AAAA,uBAAKA,EAAEkB,WAAF,EAAL;AAAA,aAAzB,CAAf,CAAP;AACH;;;mCACkB;AACf,mBAAO,iBAAEC,MAAF,CAAS,KAAKtB,cAAL,CAAoBW,GAApB,CAAwB;AAAA,uBAAGR,EAAEa,QAAF,EAAH;AAAA,aAAxB,CAAT,EAAmDO,IAAnD,CAAwD,EAAxD,CAAP;AACH;;;;;;AAGLC,QAAQ3B,UAAR,GAAqBA,UAArB","file":"captureBag.js","sourcesContent":["// @flow\n'use strict';\n\nimport assert from 'assert';\nimport _ from 'lodash';\n\nimport {PieceOnSide} from './piece.js';\n\nclass CaptureBag {\n    capturedPieces: Array<IConcretePieceOnSide>;\n    constructor() {\n        if (arguments.length===0)\n            this.capturedPieces = [];\n        else {\n            assert(arguments.length === 1);\n            assert(_.isArray(arguments[0]));\n            arguments[0].forEach(x=>{\n                assert(x instanceof PieceOnSide);\n            });\n            this.capturedPieces = arguments[0];\n        }\n    }\n    capture(p: IConcretePieceOnSide): void {\n        this.capturedPieces.push(p.switchSidesAndDemote());\n    }\n    dropOptions(sideA: boolean): Array<IConcretePiece> {\n        return _.uniq( this.capturedPieces.filter(x => sideA===x.isSideA).map ( x=> x.piece ) );\n    }\n    has(p: IConcretePieceOnSide): boolean {\n        return _.some(this.capturedPieces, (x)=>x.equals(p));\n    }\n    hasBeenDroppedBackInTheBoard(p: IConcretePieceOnSide): void {\n        assert(this.has(p), `Piece ${p.toString()} not found for removal in capture bag: ${this.toString()}`);\n        let pieceWasFound = false;\n        for (let i = this.capturedPieces.length-1 ; i >= 0; i--) {\n            if (this.capturedPieces[i].equals(p)) {\n                this.capturedPieces.splice(i, 1);\n                pieceWasFound = true;\n                break;\n            }\n        }\n        assert(pieceWasFound, 'bug at this point');\n    }\n    clone(): CaptureBag {\n        return new CaptureBag(this.capturedPieces.slice());\n    }\n    reflection(): CaptureBag {\n        return new CaptureBag(this.capturedPieces.map( (x)=>x.switchSides() ) );\n    }\n    toString(): string {\n        return _.sortBy(this.capturedPieces.map(x=>x.toString())).join('');\n    }\n}\n\nexports.CaptureBag = CaptureBag;\n"]}