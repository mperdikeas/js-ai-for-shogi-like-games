{"version":3,"sources":["../src/num-utils.js"],"names":["assertArrayOfNotAscendingPositiveValues","o","Array","isArray","prevValue","Number","POSITIVE_INFINITY","i","length","Error","join","exports"],"mappings":"AACA;;;;AAEA;;;;;;AAIA,SAASA,uCAAT,CAAiDC,CAAjD,EAAyE;AACrE,0BAAOC,MAAMC,OAAN,CAAcF,CAAd,CAAP;AACA,QAAIG,YAAoBC,OAAOC,iBAA/B;AACA,SAAK,IAAIC,IAAI,CAAb,EAAiBA,IAAIN,EAAEO,MAAvB,EAAgCD,GAAhC,EAAqC;AACjC,8BAAO,QAAQN,EAAEM,CAAF,CAAR,cAAyB,CAAzB,CAAP,0BAAyDA,CAAzD;AACA,YAAIN,EAAEM,CAAF,IAAK,CAAT,EACI,MAAM,IAAIE,KAAJ,6BAAoCR,EAAES,IAAF,CAAO,GAAP,CAApC,6CAAuFH,CAAvF,UAA6FN,EAAEM,CAAF,CAA7F,yBAAN;AACJ,YAAIN,EAAEM,CAAF,IAAKH,SAAT,EACI,MAAM,IAAIK,KAAJ,6BAAoCR,EAAES,IAAF,CAAO,GAAP,CAApC,6CAAuFH,CAAvF,UAA6FN,EAAEM,CAAF,CAA7F,2DAAuJH,SAAvJ,uCAAN;AACJA,oBAAYH,EAAEM,CAAF,CAAZ;AACH;AACJ;;AAEDI,QAAQX,uCAAR,GAAkDA,uCAAlD","file":"num-utils.js","sourcesContent":["// @flow\n'use strict';\n\nimport assert from 'assert';\n\n\n\nfunction assertArrayOfNotAscendingPositiveValues(o: Array<number>): void {\n    assert(Array.isArray(o));\n    let prevValue: number = Number.POSITIVE_INFINITY;\n    for (let i = 0 ; i < o.length ; i++) {\n        assert(typeof (o[i]) === typeof 0, `The element on the ${i}-th index is *not* a number`);\n        if (o[i]<0)\n            throw new Error(`When examining array: [${o.join(',')}] I observed that the value on index ${i} (${o[i]}) is less than zero`);\n        if (o[i]>prevValue)\n            throw new Error(`When examining array: [${o.join(',')}] I observed that the value on index ${i} (${o[i]}) is greater than the value of the previous index (${prevValue}). This will cause kittens to die`);\n        prevValue = o[i];\n    }\n}\n\nexports.assertArrayOfNotAscendingPositiveValues = assertArrayOfNotAscendingPositiveValues;\n"]}